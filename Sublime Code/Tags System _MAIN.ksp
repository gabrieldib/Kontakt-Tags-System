{ #pragma save_compiled_source ../Resources/scripts/SLOT1_MAIN.txt}

on init
    message("")
    make_perfview
    set_ui_height_px        (300)
    set_control_par         ($INST_ICON_ID,$CONTROL_PAR_HIDE,HIDE_WHOLE_CONTROL)

    declare i.i
    declare j.i

    define MAX_TAGS := 6
    define SOUND_OFFSET := MAX_TAGS
    define MAX_SOUNDS   := 5

    declare sounds[ MAX_SOUNDS * SOUND_OFFSET ]
        sounds[ 0 + 0*SOUND_OFFSET]   :=  1  // tag 1
        sounds[ 1 + 0*SOUND_OFFSET]   :=  0  // tag 2
        sounds[ 2 + 0*SOUND_OFFSET]   :=  0  // tag 3
        sounds[ 3 + 0*SOUND_OFFSET]   :=  0  // tag 4
        sounds[ 4 + 0*SOUND_OFFSET]   :=  0  // tag 5
        sounds[ 5 + 0*SOUND_OFFSET]   :=  0  // tag 6

        sounds[ 0 + 1*SOUND_OFFSET]   :=  0  // tag 1
        sounds[ 1 + 1*SOUND_OFFSET]   :=  1  // tag 2
        sounds[ 2 + 1*SOUND_OFFSET]   :=  0  // tag 3
        sounds[ 3 + 1*SOUND_OFFSET]   :=  0  // tag 4
        sounds[ 4 + 1*SOUND_OFFSET]   :=  0  // tag 5
        sounds[ 5 + 1*SOUND_OFFSET]   :=  0  // tag 6

        sounds[ 0 + 2*SOUND_OFFSET]   :=  0  // tag 1
        sounds[ 1 + 2*SOUND_OFFSET]   :=  0  // tag 2
        sounds[ 2 + 2*SOUND_OFFSET]   :=  1  // tag 3
        sounds[ 3 + 2*SOUND_OFFSET]   :=  1  // tag 4
        sounds[ 4 + 2*SOUND_OFFSET]   :=  0  // tag 5
        sounds[ 5 + 2*SOUND_OFFSET]   :=  0  // tag 6

        sounds[ 0 + 3*SOUND_OFFSET]   :=  1  // tag 1
        sounds[ 1 + 3*SOUND_OFFSET]   :=  1  // tag 2
        sounds[ 2 + 3*SOUND_OFFSET]   :=  0  // tag 3
        sounds[ 3 + 3*SOUND_OFFSET]   :=  0  // tag 4
        sounds[ 4 + 3*SOUND_OFFSET]   :=  0  // tag 5
        sounds[ 5 + 3*SOUND_OFFSET]   :=  1  // tag 6

        sounds[ 0 + 4*SOUND_OFFSET]   :=  1  // tag 1
        sounds[ 1 + 4*SOUND_OFFSET]   :=  1  // tag 2
        sounds[ 2 + 4*SOUND_OFFSET]   :=  1  // tag 3
        sounds[ 3 + 4*SOUND_OFFSET]   :=  1  // tag 4
        sounds[ 4 + 4*SOUND_OFFSET]   :=  1  // tag 5
        sounds[ 5 + 4*SOUND_OFFSET]   :=  1  // tag 6

    macro buttons_(#n#)
        declare ui_button tag_#n#
         tag_#n# -> width := 50
         tag_#n#-> text := "tag " & #n#
         move_control_px(tag_#n#, 50 + 60*#n#, 20)
         tag_#n# -> text_alignment := 1
    end macro
    iterate_macro(buttons_) := 0 to MAX_TAGS-1

    declare tag_ids[MAX_TAGS]
      tag_ids[0] := get_ui_id(tag_0)
      tag_ids[1] := get_ui_id(tag_1)
      tag_ids[2] := get_ui_id(tag_2)
      tag_ids[3] := get_ui_id(tag_3)
      tag_ids[4] := get_ui_id(tag_4)
      tag_ids[5] := get_ui_id(tag_5)

    declare temp_tag_mark[MAX_TAGS] := (1)
    declare flag

    message("Tag System loaded successfuly")
end on 

// the functions below are in reverse order of use
// start from check_tags. this is a never nesting attempt


function reset_temp_array
    // clean up needed at every new sound cycle
    for i.i := 0 to MAX_TAGS-1
        temp_tag_mark[i.i] := 1
    end for
end function

function print_selection_result
    // this is just for testing not needed in production
    if (flag = -1) // search did not find -1 in the array, only matches
        message("sound " & j.i & " is included")
    else 
        message("sound " & j.i & " is NOT included")
    end if
end function

function check_if_sound_belongs_to_tag_selection
    if (sounds[j.i*SOUND_OFFSET + i.i ] = 1)
        temp_tag_mark[i.i] := j.i
    else 
        temp_tag_mark[i.i] := -1
    end if
end function

function loop_through_tags
    for i.i := 0 to MAX_TAGS-1 // looping through tags
        if (get_control_par(tag_ids[i.i], CONTROL_PAR_VALUE) = 1) // if the tag is pressed
            call check_if_sound_belongs_to_tag_selection
        end if
    end for
end function

function check_tags
    message("new round ____________________________")
    for j.i := 0 to MAX_SOUNDS-1 // looping through sounds
        call loop_through_tags
        // if sounds does not belong to a particular tag selection, the temp_tag_mark will have at least one -1 value in it
        // meaning, if flag = -1, that sound does not belong in the current tag configuration
        flag := search(temp_tag_mark, -1)
        call print_selection_result
        call reset_temp_array
    end for
end function

macro uicb_tags(#n#)
    on ui_control (tag_#n#)
        call check_tags
    end on
end macro
iterate_macro(uicb_tags) := 0 to MAX_TAGS-1
